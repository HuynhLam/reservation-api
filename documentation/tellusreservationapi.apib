FORMAT: 1A
HOST: http://localhost:5000

# Tellus Reservation API

The room reservation RESTful API allows both human and non-human agents to real-time make booking, retrieve and manipulate room bookings, 
rooms and users information for their own purposes.
The core component of the API is Booking, which manages the available booking, booking reserved at that time and booking history. 
Users include university students and staffs, can select a room, make booking, and edit their booking.
**Only user accounts registered by University of Oulu IT service can use the system.** 
This authentication process is done externally as in a RESTful API REST does not have login or sessions so, 
authentication is not necessary for the scope of this project. 

# Group Link Relations 

This document uses IANA standard link relations (http://www.iana.org/assignments/link-relations/link-relations.xhtml). 
In addition the following link relations have been defined:

## add-user [/link-relations/add-user]

Creates a new user. Use via POST.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## delete [/link-relations/delete]

Deletes the current context. Use via DELETE.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## bookings-all [/link-relations/bookings-all]

This action list all bookings in the reservation system. 
Each item is an instance of the type Booking defined in the profile [Booking](profiles/booking_profile). 
Can only be accessed through GET.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## bookings-room [/link-relations/bookings-room]

This action list all bookings which belongs to one room in the reservation system. 
Each item is an instance of the type Booking defined in the profile [Booking](profiles/booking_profile). 
Can only be accessed through GET.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## bookings-user [/link-relations/bookings-user]

This action list all bookings which belongs to one user in the reservation system. 
Each item is an instance of the type Booking defined in the profile [Booking](profiles/booking_profile). 
Can only be accessed through GET.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## add-booking [/link-relations/add-booking]

Creates a new booking. Use via POST.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)

## history-bookings [/link-relations/history-bookings]

This action list list of 30 latest successful bookings. 
Each item is an instance of the type Booking defined in the profile [Booking](profiles/booking_profile). 
Can only be accessed through GET.

### GET

Return the link relation description in HTML format
+ Response 200 (text/html)




# Group Profiles

## Room Profile [/profiles/room_profile]

Profile definition for all rooms related resources.

### Dependencies

This profile inherits:
 * Some semantic descriptors from [schema.org/MeetingRoom](http://schema.org/MeetingRoom)

### Link relations

 * [bookings-room](reference/link-relations/bookings-room)

### Semantic Descriptors

#### Data Type Room

 * `resources` (string): List of resources available in the room such as projector etc.

Inherited from [schema.org/MeetingRoom](http://schema.org/MeetingRoom)
 * `name`(string): See [https://schema.org/name](https://schema.org/name)
 * `photo` (string): See[https://schema.org/photo](https://schema.org/photo)

### GET

Return the Message Profile in HTML format
+ Response 200 (text/html)


## Error Profile [/profiles/error_profile]

Profile definition for all errors messages in the system

+ Attributes 
    + resource_url (string, required) - A url of the resource generating the error

### GET

Return the Error Profile in HTML format
+ Response 200 (text/html)

## User Profile [/profiles/user_profile]

Profile definition for all user resources.

### Dependencies

This profile inherits:
 * Some semantic descriptors from [https://schema.org/Person](https://schema.org/Person)

### Link relations

 * [add-user](reference/link-relations/add-user)
 * [delete](reference/link-relations/delete)
 * [bookings-user](reference/link-relations/bookings-user)

### Semantic Descriptors

#### Data Type User

 * `username` (string): Username of a user. 
 * `isAdmin` (boolean): Account type to identify User or Admin.
 
Inherited from [schema.org/Person](http://schema.org/Person)
 * `email` (string):See [http://schema.org/email](http://schema.org/email)
 * `familyName` (string):See [http://schema.org/familyName](http://schema.org/familyName)
 * `givenName` (string):See [http://schema.org/givenName](http://schema.org/givenName)
 * `telephone` (string):See [http://schema.org/telephone](http://schema.org/telephone)



### GET

Return the User Profile in HTML format
+ Response 200 (text/html)

## Booking Profile [/profiles/booking_profile]

Profile definition for all booking resources.

### Dependencies

This profile inherits:
 * Some semantic descriptors from [https://schema.org/Reservation](https://schema.org/Reservation)
 * Some semantic descriptors from [https://schema.org/Person](https://schema.org/Person)
 * Some semantic descriptors from [schema.org/MeetingRoom](http://schema.org/MeetingRoom)

### Link relations

 * [delete](reference/link-relations/delete)

### Semantic Descriptors

#### Data Type Booking

 * `username` (string): Username of a user.
 * `booking_id` (integer): Id of booking.
 
Inherited from [schema.org/Reservation](http://schema.org/Reservation)
 * `bookingTime` (string):See [https://schema.org/bookingTime](https://schema.org/bookingTime)

Inherited from [schema.org/Person](http://schema.org/Person)
 * `email` (string):See [http://schema.org/email](http://schema.org/email)
 * `familyName` (string):See [http://schema.org/familyName](http://schema.org/familyName)
 * `givenName` (string):See [http://schema.org/givenName](http://schema.org/givenName)
 * `telephone` (string):See [http://schema.org/telephone](http://schema.org/telephone)

Inherited from [schema.org/MeetingRoom](http://schema.org/MeetingRoom)
 * `name`(string): See [https://schema.org/name](https://schema.org/name)



### GET

Return the User Profile in HTML format
+ Response 200 (text/html)



# Group Rooms

All these resources use the [Room Profile](reference/profiles/room_profile).

In addition all error messages follow the profile defined [Error Profile](reference/profiles/error_profile)



## Rooms List [/tellus/api/rooms]

A list of all rooms in Tellus.

### Rooms List [GET]

Get the list of all Rooms in the system.


+ Relation: self    
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    Rooms list was successfully retrieved.
   
    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                
                "items": [
                    {
                        "name": "Stage", 
                        "photo": "stage.jpg",
                        "resources": "Projector, Microphone, Speaker, Webcam, Tables, Chairs",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/rooms/Stage"
                            },
                            "profile": {
                                "href": "/profiles/room_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/rooms/
                            },
                            "edit": {
                                "title": "Modify Room",
                                "href": "/tellus/api/rooms/Stage",
                                "encoding": "json",
                                "method": "PUT",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "resources": {
                                            "title": "Resources",
                                            "description": "Resources avaible in room",
                                            "type": "string"
                                        },
                                        "photo": {
                                            "title": "Photo",
                                            "description": "Photo of the room",
                                            "type": "string"
                                        },
                                    }
                                }
                            },
                            "tellus:books-room": {
                                "href": "/tellus/api/rooms/Stage/bookings"
                            }
                        }
                    },
                    {
                        "name": "Aspire", 
                        "photo": "aspire.jpg",
                        "resources": "TV, Webcam, Microphone, Tables, Chairs",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/rooms/Aspire"
                            },
                            "profile": {
                                "href": "/profiles/room_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/rooms/
                            },
                            "edit": {
                                "title": "Modify Room",
                                "href": "/tellus/api/rooms/Aspire",
                                "encoding": "json",
                                "method": "PUT",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "resources": {
                                            "title": "Resources",
                                            "description": "Resources avaible in room",
                                            "type": "string"
                                        },
                                        "photo": {
                                            "title": "Photo",
                                            "description": "Photo of the room",
                                            "type": "string"
                                        },
                                    }
                                }
                            },
                            "tellus:books-room": {
                                "href": "/tellus/api/rooms/Aspire/bookings"
                            }
                        }
                    }
                ],
                
                "@controls": {
                    "self": {
                        "href": "/tellus/api/rooms/"
                    }
                }
            }
    

## Room [/tellus/api/rooms/{name}]

A room stored in the Tellus database. A room contains a photo which is an URL to where the room picture and resources which are 
list of resources available in the room such as projector etc.

+ Parameters 
    + name: `Stage` (string)   - The name of the room


### Edit a room [PUT]       

Edit the information of a room.

+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body 
    
            {
                "resources": "Tables, Chairs",
                "photo": "new_stage.jpg"
            }


+ Response 204

    The room is modified correctly
        
    + Body

+ Response 400 (application/vnd.mason+json)

    The room format is not well formed. Some of the parameters is not correctly received. 
    
    + Body
    
            {
                "@error": {
                    "@message": "Wrong request format"
                    "@messages": [
                        "Be sure you write parameter names correctly."
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage"
            }

+ Response 404 (application/vnd.mason+json)

    The room with name `name` does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "Room does not exist"
                    "@messages": [
                        "There is no a room with name Stage"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage"
            }

+ Response 415 (application/vnd.mason+json)

    The server cannot understand the format of the response.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Unsupported media type"
                    "@messages": [
                        "Use a JSON compatible format"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage"
            }

+ Response 500  (application/vnd.mason+json)

    The server cannot store the room in the database.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Problem with the database"
                    "@messages": [
                        "Cannot access the database"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage"
            }


#Group Users

All these resources use [User Profile](reference/profiles/user_profile).

In addition all error messages follow the profile defined [Error Profile](reference/profiles/error_profile)

## Users [/tellus/api/users/]

### Register a user [POST]       

Create a new user.

+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body 
    
            {
                "username": "nightwisher",
                "isAdmin": "False",
                "email": "floor.jansen@nightwish.com",
                "familyName": "Jansen",
                "givenName": "Floor",
                "telephone": "0446666666"
            }

+ Response 201

    The user is created correctly. 
        
    + Headers
                
            Location: URL of the new created resource

+ Response 400 (application/vnd.mason+json)

    The User format is not well formed. Some of the parameters is not correctly received. 
    
    + Body
    
            {
                "@error": {
                    "@message": "Wrong request format",
                    "@messages": [
                        "Be sure you include all mandatory properties"
                    ]
                }
                "resource_url: "/tellus/api/users/"
            }

+ Response 409 (application/vnd.mason+json)

    Exists a user with the same username
    
    + Body
    
            {
                "@error": {
                    "@message": "Reserved username",
                    "@messages": [
                        "There is already a user with same username: nightwisher"
                    ]
                }
                "resource_url: "/tellus/api/users/"
            }

+ Response 415 (application/vnd.mason+json)

    The server cannot understand the format of the response.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use a JSON compatible format"
                    ]
                }
                "resource_url": "/tellus/api/users/",
            }


+ Response 500 (application/vnd.mason+json)

    The server cannot store the user in the database.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Problem with the database"
                    "@messages": [
                        "Cannot access the database"
                    ]
                }
                "resource_url": "/tellus/api/users/",
            }


## User [/api/users/{username}]

A user is a student or stuff at University of Oulu. A user can reserve a room. A user with admin privileges can modify room. 
Each user has a unique username that serves as a unique identifier in the system. 
One user cannot register using an existing username.

+ Parameters 
    + username: `lam` (string)   - The username of the user to search for.

### User [GET]

Get one user in the system.


+ Relation: self    
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    User was successfully retrieved.
   
    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                "username": "lam",
                "isAdmin": "False",
                "email": "lam.huynh@ee.oulu.fi",
                "familyName": "Huynh",
                "givenName": "Lam",
                "telephone": "0411322922"
                "@controls": {
                    "self": {
                        "href": "/tellus/api/users/lam"
                    },
                    "profile": {
                        "href": "/profiles/user_profile/"
                    },
                    "tellus:delete": {
                        "title": "Delete user",
                        "href": "/tellus/api/users/lam",
                        "method": "DELETE"
                    },
                    "tellus:bookings-user": {
                        "href": "/tellus/api/users/lam/bookings"
                    },
                    "tellus:add-user": {
                        "title": "Add User",
                        "href": "/tellus/api/users/",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "title": "Username",
                                    "description": "Username of user",
                                    "type": "string"
                                },
                                "isAdmin": {
                                    "title": "Admin",
                                    "description": "Account type to identify User or Admin",
                                    "type": "boolean"
                                },
                                "email": {
                                    "title": "E-mail",
                                    "description": "E-mail of user",
                                    "type": "string"
                                },
                                "familyName": {
                                    "title": "Family Name",
                                    "description": "Family name of the user",
                                    "type": "string"
                                },
                                "givenName": {
                                    "title": "Given Name",
                                    "description": "Given name of the user",
                                    "type": "string"
                                },
                                "telephone": {
                                    "title": "Phone Number",
                                    "description": "Phone Number of the user",
                                    "type": "string"
                                }
                            },
                            "required": ["username"]
                        }
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The user with username `username` does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "User does not exist"
                    "@messages": [
                        "There is no a user with username lam"
                    ]
                }
                "resource_url": "/tellus/api/users/lam/"
            }

### Delete a user [DELETE]

Delete a user from the system

+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 204

    The user was successfully deleted
        
    + Body
        

+ Response 404 (application/vnd.mason+json)

    The user with username `username` does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "User does not exist"
                    "@messages": [
                        "There is no a user with username lam"
                    ]
                }
                "resource_url": "/tellus/api/users/lam/"
            }


# Group Bookings

All these resources use the [Booking Profile](reference/profiles/booking_profile).

In addition all error messages follow the profile defined [Error Profile](reference/profiles/error_profile)


## Bookings List [/tellus/api/bookings/]

A list of all Bookings in the database.


### List Bookings [GET]

Get a list of all bookings in the system.

+ Relation: self    
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    List Bookings was successfully retrieved. For the sake of simplicity we do not include user's details.

    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                
                "items": [
                    {
                        "name": "Stage",
                        "username": "kirbac",
                        "bookingTime": "2017-03-01 10:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/bookings/1/"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Stage/bookings/1/",
                                "method": "DELETE"
                            }
                        }
                    },
                    {
                        "name": "Chill",
                        "username": "paradise",
                        "bookingTime": "2017-03-05 12:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/bookings/2/"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Chill/bookings/2/",
                                "method": "DELETE"
                            }
                        }
                    }
                ],
                
                "@controls": {
                    "self": {
                        "href": "/tellus/api/bookings"
                    },
                    "tellus:history-booking": {
                        "href": "/tellus/api/bookings/history"
                    }
                }
            } 


## Bookings of Room [/tellus/api/rooms/{name}/bookings]

A list of all Bookings for one room.

+ Parameters 
    + name: `Stage` (string)   - The name of the room

### Bookings of Room [GET]

Get a list of all bookings by room name in the system

+ Relation: self    
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    List Bookings was successfully retrieved.
   
    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                "items": [
                    {
                        "name": "Stage",
                        "username": "kirbac",
                        "bookingTime": "2017-03-01 10:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/rooms/Stage/bookings/1"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/rooms/Stage/bookings"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Stage/bookings/1/",
                                "method": "DELETE"
                            },
                            "edit": {
                                "title": "Modify Booking",
                                "href": "/tellus/api/bookings/",
                                "encoding": "json",
                                "method": "PUT",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "title": "User Name",
                                            "description": "Username of the booking's owner",
                                            "type": "string"
                                        },
                                        "bookingTime": {
                                            "title": "Booking Time",
                                            "description": "Date and time of the booking",
                                            "type": "string"
                                        },
                                        "email": {
                                            "title": "Email",
                                            "description": "Email of the booking's owner",
                                            "type": "string"
                                        },
                                        "familyName": {
                                            "title": "Family Name",
                                            "description": "Family Name of the booking's owner",
                                            "type": "string"
                                        },
                                        "givenName": {
                                            "title": "Given Name",
                                            "description": "Given Name of the booking's owner",
                                            "type": "string"
                                        },
                                        "telephone": {
                                            "title": "Telephone",
                                            "description": "Telephone number of the booking's owner",
                                            "type": "string"
                                        },
                                        "name": {
                                            "title": "Room name",
                                            "description": "Room name which the booking take place",
                                            "type": "string"
                                        },
                                    },
                                    "required": ["username", "bookingTime", "name"]
                                }
                            }
                        }
                    },
                    {
                        "name": "Stage",
                        "username": "lam",
                        "bookingTime": "2017-03-01 15:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/rooms/Stage/bookings/5"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/rooms/Stage/bookings"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Stage/bookings/5/",
                                "method": "DELETE"
                            },
                            "edit": {
                                "title": "Modify Booking",
                                "href": "/tellus/api/bookings/",
                                "encoding": "json",
                                "method": "PUT",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "title": "User Name",
                                            "description": "Username of the booking's owner",
                                            "type": "string"
                                        },
                                        "bookingTime": {
                                            "title": "Booking Time",
                                            "description": "Date and time of the booking",
                                            "type": "string"
                                        },
                                        "email": {
                                            "title": "Email",
                                            "description": "Email of the booking's owner",
                                            "type": "string"
                                        },
                                        "familyName": {
                                            "title": "Family Name",
                                            "description": "Family Name of the booking's owner",
                                            "type": "string"
                                        },
                                        "givenName": {
                                            "title": "Given Name",
                                            "description": "Given Name of the booking's owner",
                                            "type": "string"
                                        },
                                        "telephone": {
                                            "title": "Telephone",
                                            "description": "Telephone number of the booking's owner",
                                            "type": "string"
                                        },
                                        "name": {
                                            "title": "Room name",
                                            "description": "Room name which the booking take place",
                                            "type": "string"
                                        },
                                    },
                                    "required": ["username", "bookingTime", "name"]
                                }
                            }
                        }
                    }
                ],
                
                "@controls": {
                    "self": {
                        "href": "/tellus/api/rooms/Stage/bookings"
                    },
                    "tellus:bookings-all": {
                        "href": "/tellus/api/bookings/"
                    },
                    "tellus:add-booking": {
                        "title": "Create booking",
                        "href": "/tellus/api/rooms/Stage/bookings",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "title": "User Name",
                                    "description": "Username of the booking's owner",
                                    "type": "string"
                                },
                                "bookingTime": {
                                    "title": "Booking Time",
                                    "description": "Date and time of the booking",
                                    "type": "string"
                                },
                                "email": {
                                    "title": "Email",
                                    "description": "Email of the booking's owner",
                                    "type": "string"
                                },
                                "familyName": {
                                    "title": "Family Name",
                                    "description": "Family Name of the booking's owner",
                                    "type": "string"
                                },
                                "givenName": {
                                    "title": "Given Name",
                                    "description": "Given Name of the booking's owner",
                                    "type": "string"
                                },
                                "telephone": {
                                    "title": "Telephone",
                                    "description": "Telephone number of the booking's owner",
                                    "type": "string"
                                },
                                "name": {
                                    "title": "Room name",
                                    "description": "Room name which the booking take place",
                                    "type": "string"
                                },
                            },
                            "required": ["username", "bookingTime", "name"]
                        }
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The room with name `name` does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "Room does not exist"
                    "@messages": [
                        "There is no a room with name Stage"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage"
            }

### Create a new booking [POST]       

Create a new booking. 

+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body 
    
            {
                "username": "YoungUno",
                "bookingTime": "2017-03-01 10:00",
                "email": "uyoung@cool.com",
                "familyName": "Young",
                "givenName": "Uno",
                "telephone": "4165971265"
            }

+ Response 201

    The booking is created correctly. 
        
    + Headers
                
            Location: URL of the new created resource

+ Response 400 (application/vnd.mason+json)

    The booking is not well formed. Some of the parameters is not correctly received. 
    
    + Body
    
            {
                "@error": {
                    "@message": "Wrong request format"
                    "@messages": [
                        "There is something wrong with the booking format."
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings"
            }

+ Response 409 (application/vnd.mason+json)

    Try to create a new booking similar with an existence booking.
    
    + Body
    
            {
                "@error": {
                    "@message": "Conflict booking",
                    "@messages": [
                        "The new booking was conflicted with an existence booking."
                    ]
                }
                "resource_url: "/tellus/api/rooms/Stage/bookings"
            }

+ Response 415 (application/vnd.mason+json)

    The server cannot understand the format of the response.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Unsupported media type"
                    "@messages": [
                        "Use a JSON compatible format"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings"
            }

+ Response 500  (application/vnd.mason+json)

    The server cannot store the booking in the database.
    
    + Body
    
            {
                "@error": {
                    "@message": "Problem with the database"
                    "@messages": [
                        "Cannot access the database"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings"
            }


## Booking of Room [/tellus/api/rooms/{name}/bookings/{booking_id}/]

It is a booking which belongs to specified room. A Booking stored in the Bookings database. A booking contains room name which the booking will place, 
information of user who currently make the booking (include username, firstname, lastname, email and contact number), the time the booking will
happen and a unique id that identifies this booking in the database.

+ Parameters 
    + name: `Stage` (string)   - The name of the room
    + booking_id: `1` (integer) - Id of booking

### Modify an existence booking of room [PUT]       

Modify an existence booking by room name, the time information will be change.  

+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body 
    
            {
                "username": "YoungUno",
                "bookingTime": "2017-03-01 12:00",
                "email": "uyoung@cool.com"
            }

+ Response 204

    The booking is modified correctly
        
    + Body

+ Response 400 (application/vnd.mason+json)

    The booking format is not well formed. Some of the parameters is not correctly received. 
    
    + Body
    
            {
                "@error": {
                    "@message": "Wrong request format",
                    "@messages": [
                        "Be sure you include all mandatory properties"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings/"
            }

+ Response 404 (application/vnd.mason+json)

    The booking does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "Booking does not exist"
                    "@messages": [
                        "The wanted-changing booking is non-exist."
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings/"
            }

+ Response 415 (application/vnd.mason+json)

    The server cannot understand the format of the response.
    
    + Body 
    
            {
                "@error": {
                    "@message": "Unsupported media type"
                    "@messages": [
                        "Use a JSON compatible format"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings/"
            }

+ Response 500  (application/vnd.mason+json)

    The server cannot store the booking in the database.
    
    + Body 

            {
                "@error": {
                    "@message": "Problem with the database"
                    "@messages": [
                        "Cannot access the database"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings/"
            }

### Delete a booking of room [DELETE]

Delete a booking from the system

+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 204

    The booking was successfully deleted
        
    + Body 
        

+ Response 404 (application/vnd.mason+json)

    The booking does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "Booking does not exist"
                    "@messages": [
                        "There is no a booking to delete"
                    ]
                }
                "resource_url": "/tellus/api/rooms/Stage/bookings/1"
            }

## Bookings of User [/tellus/api/users/{username}/bookings]

A list of all Bookings for one user.

+ Parameters 
    + username: `lam` (string)   - The username of the user

### Bookings of User [GET]

Get a list of all bookings by username in the system

+ Relation: self    
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    List Bookings was successfully retrieved.
   
    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                "items": [
                    {
                        "name": "Stage",
                        "username": "lam",
                        "bookingTime": "2017-03-07 10:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/users/lam/bookings/7"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/users/lam/bookings/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/users/lam/bookings/7",
                                "method": "DELETE"
                            }
                        }
                    },
                    {
                        "name": "Chill",
                        "username": "lam",
                        "bookingTime": "2017-03-07 16:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/users/lam/bookings/8"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "collection": {
                                "href": "/tellus/api/users/lam/bookings/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/users/lam/bookings/8",
                                "method": "DELETE"
                            }
                        }
                    }
                ],
                
                "@controls": {
                    "self": {
                        "href": "/tellus/api/users/lam/bookings"
                    },
                    "tellus:bookings-all": {
                        "href": "/tellus/api/bookings/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The user with username `username` does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "User does not exist"
                    "@messages": [
                        "There is no a user with username lam"
                    ]
                }
                "resource_url": "/tellus/api/users/lam/"
            }

## Booking of User [/tellus/api/users/{username}/bookings/{booking_id}/]

It is a booking which belongs to specified user. A Booking stored in the Bookings database. A booking contains room name which the booking will place, 
information of user who currently make the booking (include username, firstname, lastname, email and contact number), the time the booking will
happen and a unique id that identifies this booking in the database.

+ Parameters 
    + username: `lam` (string)   - The name of the room
    + booking_id: `7` (integer) - Id of booking

### Delete a booking of room [DELETE]

Delete a booking from the system

+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 204

    The booking was successfully deleted
        
    + Body 
        

+ Response 404 (application/vnd.mason+json)

    The booking does not exist in the database.
        
    + Body 
    
            {
                "@error": {
                    "@message": "Booking does not exist"
                    "@messages": [
                        "There is no a booking to delete"
                    ]
                }
                "resource_url": "/tellus/api/users/lam/bookings/7/"
            }

## History Bookings [/tellus/api/bookings/history{?limit}]
Get a list of 30 latest successful bookings in the system

The limit parameter uses to create constrain of the number of successful booking returned.
Default value of 'limit' is 30 bookings.

+ Parameters

    + limit (number, optional) - The maximum number of bookings to return.
        + Default: `30`

### History [GET]

+ Relation: self
+ Request
    
    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    History of Bookings was successfully retrieved.
   
    + Body 
    
            {
                "@namespaces": {
                    "tellus": {
                        "name": "/tellus/link-relations/"
                    }
                },
                "items": [
                    {
                        "name": "Stage",
                        "username": "kirbac",
                        "bookingTime": "2016-03-01 11:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/bookings/11/"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Stage/bookings/11/",
                                "method": "DELETE"
                            }
                        }
                    },
                    {
                        "name": "Chill",
                        "username": "paradise",
                        "bookingTime": "2016-03-05 13:00",
                        "@controls": {
                            "self": {
                                "href": "/tellus/api/bookings/12/"
                            },
                            "profile": {
                                "href": "/profiles/booking_profile/"
                            },
                            "tellus:delete": {
                                "title": "Delete booking",
                                "href": "/tellus/api/rooms/Chill/bookings/12/",
                                "method": "DELETE"
                            }
                        }
                    }
                ],
                
                "@controls": {
                    "self": {
                        "href": "/tellus/api/bookings/history/"
                    }
                }
            }
     